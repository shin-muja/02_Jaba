Java 프로젝트 명명규칙
- 대소문자 구분없이 가능
- 대문자 사용을 권장
- 회사의 기준에 따르기

project 만들시
Module 항목
Create module-info.java file 체크 해제 권장

src 폴더
만든 자바 코드 파일들을 모아두는곳

Package
관련된 코드들의 묶음 == 파일들의 묶음 == 폴더

edu.kh.basic : 사이의 '.'는 하위를 뜻함

웹개발 시
패키지명의 명명규칙
 - 소문자
 - 도메인 이름 역순 : cafe.naver.com -> 패키지 명 : com.naver.cafe
 - 최소 3레벨

class 파일 명명규칙
 - 대문자 시작
 - 단어 구분 시
각 단어의 첫글자 대문자 표기
 - 특수문자 금지

문자형 대입은 ''만 가능
문자열 대입은 "" 만 가능

String 참조형 변수


자동 형변환
값의 범위가 더 큰 자료형으로 변환

float 값의 범위 : 3.4 *10의 38승

long이 byte가 더 크지만 값의 범위는 더 작다


배열 선언 : 메모리에 배열을 참조하는 변수 공간을 만듬 ( 값 직접 저장X, 배열의 주소를 저장)

기본자료형(Primitive type) : int, double, boolean 같은 일반 자료형은 stack 영역에 있음

참조자료형(Reference type) : 배열(array), 객체(Object), Stirng은 heap영역에 할당

배열의 변수는 참조변수로 heap영역에 생성된 배열의 주소를 참조한다
new 연산자에 할단된 객체나 배열은 heap영역에 할당된다

heap영역에 할당된 공간은 '절대' 비어있을 수 없다.
-> 최초 할당 시 JVM 기본 값이 자동 저장된다
(boolean은 false, 나머지 0, 참조형 null)

JAVA에서 배열 리터럴 표기법은 {}



OOP 
객체 : 독립적으로 각각 구분해서 인식할 수 있는 모든 것
-물건, 물체, 요소, 대상...

지향 : 어떠한 것을 목표로 함.

객체 지향 -> 독립적으로 각각 구분해서 인식할수 있게 끔 하는 것을 목표로 함

3 + 1대특징

캡슐화 : 요소들을 모으고 외부로부터 보호하는 특징

상속 : 아버지의 성을 자식에게 물려받는듯한 특징, 부모 클래스의 객체를 자식클래스가 물려받아 사용

☆다형성 : 다양한 형태를 지니는 성질, 형태를 바꿀수 있음 

+

추상화 : 공통된 코드만 작성 (선언은 선언별로, 연산은 연산별로)


객체 : 속성(값, data)과 기능(동작, 행동)이 다른것들과 구분되어 식별 가능한 것

사람으로 예시
속성 : 이름, 나이, 생년월일 등등
기능 : 밥먹기, 걷는다, 잠잔다 등등

class : 객체의 특성( 속성, 기능)에 대한 정의를 한 것
필드, 생성자, 메서드로 이루어짐 / 생성자는 또하나의 메서드와 같다
** 추상화, 캡슐화 ** 반드시 적용되어야 함

추상화(absraction)

캡슐화의 이유 : 데이터 물결성, getter와 setter를 통한 데이터 조건이나 들어온 값에 따른 변화들을 실행 시키고 데이터 유효성 검사를 할 수 있다.
데이터를 직접접근이 가능 시 이러한 유효성


class 접근 제한자

+ public : 같은 패키지 내 O, 전체 O
- default : 같은 패키지 내 O, 전체 X


*** 자바에서의 각 변수의 특징 ***

1. 클래스변수 - static으로 선언된 멤버변수
2. 인스턴스 변수 - new heap 에 할당되는 객체(인스턴스)
3. 지역변수 - 메서드, 제어문 변수 stack

필드 접근 제한자
+ public : 해당 클래스 내부 O, 같은 패키지 내 O, 후손 클래스 내 O, 전체 O
# protected : 해당 클래스 내부 O, 같은 패키지 내 O, 후손 클래스 내 O, 전체 X
! (default) : 해당 클래스 내부 O, 같은 패키지 내 O, 후손 클래스 내 X, 전체 X
- private해당 클래스 내부 O, 같은 패키지 내 X, 후손 클래스 내 X, 전체 X
앞 표시는 클래스 다이어그램외에도 사용해주는 표시들

생성자 반환형이 없고 클래스명과 대소문자 모두 일치해야함

CRUD(Create, Read, Updata, Delete) : 데이터 삽입, 조회, 수정, 삭제를 의미






