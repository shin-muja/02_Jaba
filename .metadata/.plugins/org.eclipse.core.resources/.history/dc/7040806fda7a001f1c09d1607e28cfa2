package com.hw3.medel.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import com.hw3.medel.dto.Book;

public class BookService {
	
	private Scanner sc = new Scanner(System.in);
	private List<Book> bookList = new ArrayList<Book>();
	private List<Book> favoritesBookList = new ArrayList<Book>();
	
	public BookService() {
		// TODO Auto-generated constructor stub
		bookList.add(new Book(1111, "세이노의 가르침", "세이노", 6480, "데이윈"));
		bookList.add(new Book(2222, "문과남자의 과학공부", "유시민", 15750, "돌배게"));
		bookList.add(new Book(3333, "역행자", "자청", 17550, "웅진지식하우스"));
		bookList.add(new Book(4444, "꿀벌의 예언", "베르나르 베르베르", 15120, "열린책들"));
		bookList.add(new Book(5555, "도둑맞은 집중력", "요한 하리", 16920, "어크로스"));
	}
	
	public void displayMenu() {
		
		
		try {
			while (true) {
				System.out.println("===도서 목록 프로그램===");
				System.out.println("1. 도서 등록");
				System.out.println("2. 도서 조회");
				System.out.println("3. 도서 수정");
				System.out.println("4. 도서 삭제");
				System.out.println("5. 즐겨찾기 추가");
				System.out.println("6. 즐겨찾기 삭제");
				System.out.println("7. 즐겨찾기조회");
				System.out.println("8. 추천도서 뽑기");
				System.out.println("0. 프로그램 종료");
				
				System.out.print("메뉴를 입력하세요 : ");
				int input = sc.nextInt();
				sc.nextLine();
				
				switch( input ) {
				case 1: addBook(); break;
				case 2: checkBookList(bookList); break;
				case 3: confidBook(); break;
				case 4: deleteBook(); break;
				case 5: addFavorites(); break;
				case 6: deleteFavorites(); break;
				case 7: checkBookList(favoritesBookList); break;
				case 8: recommendBook(); break;
				case 0: System.out.println("시스템을 종료합니다"); return;
				
				default: System.out.println("지정된 숫자 외 다른 숫자가 입력되셨습니다\n다시입력해주세요.");
				}
			}
			
		} catch ( Exception e ) {
			System.out.println("오류다");
		}
	}
	
	public void addBook() {
		
		System.out.println("==============도서 등록==============");
		System.out.print("도서 번호 : ");
		int number = sc.nextInt();
		sc.nextLine();
		
		for( Book book : bookList) {
			if( book.getBookNumber() == number) {
				System.out.println("일치하는 번호가 있습니다");
				return;
			}
		}
		
		System.out.print("도서 제목 : ");
		String name = sc.nextLine();
		
		System.out.print("도서 저자 : ");
		String author = sc.nextLine();
		
		System.out.print("도서 가격 : ");
		int price = sc.nextInt();
		sc.nextLine();
		
		System.out.print("도서 출판사 : ");
		String publisher = sc.nextLine();
		
		bookList.add(new Book(number, name, author, price, publisher));
		
		BookCompar(bookList);
		
		
		System.out.println("등록 완료");
		System.out.println();
	}
	
	/** 도서 목록 조회용 메서드
	 * @param List<Book>
	 */
	public void checkBookList(List<Book> list) {
		
		if( list.isEmpty()) {
			System.out.println("등록된 도서가 없습니다. 도서를 드록해주세요!");
			return;
		}
		
		System.out.println();
		for(Book book : list) {
			System.out.println(book); // book.toString();
		}
		System.out.println();
	}
	
	public void confidBook() {
		System.out.println("=========도서 정보 수정=========");
		System.out.print("수정할 도서 번호를입력하세요 : ");
		int number = sc.nextInt();
		sc.nextLine();
		
		for(Book book : bookList) {
			if(book.getBookNumber() == number) {
				System.out.println();
				System.out.println("1. 도서명");
				System.out.println("2. 도서 저자");
				System.out.println("3. 도서 가격");
				System.out.println("4. 도서 출판사");
				System.out.println("0. 수정종료");
				
				System.out.print("어떤 정보를 수정하시겠습니까? ");
				int input = sc.nextInt();
				sc.nextLine();
				
				switch(input) {
				case 1: System.out.print("수정할 책의 제목을 입력하세요 : ");
						String name = sc.nextLine();
						book.setName(name);
						System.out.println("수정 완료");
						return;	
						
				case 2:System.out.print("수정할 책의 저자를 입력하세요 : ");
						String author = sc.nextLine();
						book.setAuthor(author);
						System.out.println("수정 완료");
						return;
				
				case 3:System.out.print("수정할 가격을 입력하세요 : ");
						int price = sc.nextInt();
						sc.nextLine();
						book.setPrice(price);
						System.out.println("수정 완료");
						return;
				
				case 4:System.out.print("수정할 출산사을 입력하세요 : ");
						String publisher = sc.nextLine();
						book.setPublisher(publisher);
						System.out.println("수정 완료");
						return;
				
				case 0: System.out.println("수정을 종료합니다. ");return;
				
				default: System.out.println("지정된 숫자를 입력해주세요."); break;
				}
			}
		}
	}
	
	public void deleteBook() {
		System.out.println("=========도서 삭제=========");
		System.out.print("삭제할 도서 번호를 입력해주세요 : ");
		int number = sc.nextInt();
		
		for( Book book : bookList) {
			if(book.getBookNumber() == number) {
				bookList.remove(book);
				System.out.println("성공적으로 삭제되었습니다.");
				return;
			}
		}
		
		System.out.println("일치하는 도서 번호가 없습니다");
	}
	 
	public void addFavorites() {
		System.out.println("============즐겨찾기 추가============");
		System.out.print("즐겨찾기할 도서 번호를 입력해주세요 : ");
		int number = sc.nextInt();
		
		if( !favoritesBookList.isEmpty()) {
			for( Book book : favoritesBookList) {
				if(book.getBookNumber() == number) {
					System.out.println("이미 즐겨찾기에 추가한 책입니다.");
					return;
				}
			}
		}
		
		for(Book book : bookList) {
			if(book.getBookNumber() == number ) {
				favoritesBookList.add(book);
				System.out.println("즐겨찾기에 추가되었습니다.");
				BookCompar(favoritesBookList);
				return;
			}
		}
		
		System.out.println("일치하는 도서 번호가 없습니다.");
	}
	
	public void deleteFavorites() {
		System.out.println("==============즐겨찾기 제거==============");
		System.out.print("즐겨찾기에서 제거할 도서 번호를 입력해주세요 : ");
		int number = sc.nextInt();
		
		if( favoritesBookList.isEmpty()) {
			System.out.println("즐겨찾기 추가 후 이용해주세요.");
			return;
		}
		
		for(Book book : bookList) {
			if(book.getBookNumber() == number ) {
				favoritesBookList.remove(book);
				System.out.println("즐겨찾기에서 제거되었습니다.");
				return;
			}
		}
		
		System.out.println("일치하는 도서 번호가 없습니다.");
	}
	
	public void recommendBook() {
		Random random = new Random();
		
		System.out.println();
		System.out.println("*********추천도서***********");
		System.out.println("추천 도서명 : " + bookList.get(random.nextInt(bookList.size())).getName());
		System.out.println();
		
	}
	
	public void BookCompar(List<Book> list) {
		Comparator<Book> comparator = Comparator.comparing(Book::getBookNumber);
		
		Collections.sort(list, comparator);
	}
	
}
