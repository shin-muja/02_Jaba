package edu.kh.io.pack2.model.service;

import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class ByteService {
	/*
	 * 스트림(Stream) : 데이터가 이동하는 통로
	 * 					기본적으로 한 방향으로 흐름
	 * 
	 * Byte 기반 스트림
	 * 
	 * - 1byte 단위로 데이터를 입/출력하는 스트림
	 * 
	 * - 최상위 클래스 : InputStream, OutputStream
	 * 
	 * - 문자열, 이미지, 영상, 오디오, pdf등
	 *   모든것을 입/출력 할 수 있음
	 *   (단, 통로가 좁다보니 속도가 좀 느림, 
	 *   char 형 문자는 깨질 우려가 있음)
	 */
	
	// IO 관련된 코드 IOException이 발생될 가능성이 높다!
	// -> 거의 모든 메서드가 throws IOException
	// -> IOException 예외 처리 구문을 작성하는 것이 필수
	
	/** 바이트 기반 스트림을 이용한 파일 출력
	 *  + 데이터 출력
	 * 
	 */
	public void fileByteOutput() {
		
		// FileOutputStream 참조 변수 선언( OutputStream을 상속 받은 자식 클래스 )
		FileOutputStream fos = null;
		
		try {
			
			// new FileOutputStream("경고") : 
			// -> 경로에 작성된 파일과 연결된 파일 출력 스트림 객체 생성
			// -> 출력 스트림에 연결된 파일이 존재하지 않으면 자동 생성
			// 단, 폴드는 생성되지 않음
			// -> 기존 파일이 존재하면 내용을 덮어쓰기함
			
			fos = new FileOutputStream("/io_test/20240926/바이트기반_테스트.txt");
			// FileNotFoundException의 예외처리를 해줘야함
			
			// String 불변성 문제를 해결한 객체 -> 가변성
			
			// StringBuilder(비동기) / StringBuffer(동기)
			StringBuilder sb = new StringBuilder();
			
			sb.append("Hello World!!\n");
			sb.append("1234567890\n");
			sb.append("~!@#$%^&^&**<>_+()\n");
			sb.append("가나다라마바사아\n");
			sb.append("이제 그만 쓰고싶어요\n");
			sb.append("무야호 \\\\\\~~~~~~~~~~~\n");
			
			// 출력방법 1: 한 글자(2byte)씩 파일로 출력
			// -> 2btye 범주의 문자(영어, 숫자, 기본 특수문자 제외)
			// 는 바이트 기반스트림 통과시
			// 데이터 손실이 발생해서 글자가 깨지는 문제가 발생
			
			// StringBuilder -> String 변환
			String content = sb.toString();
			
			/*
			for( int i = 0 ; i < content.length() ; i++ ) {
				
				char ch = content.charAt(i); // i번째글자 반환
				fos.write(ch);
			}
			*/
			
			// 출력 방법 2: String을 byte[] 변환 후 출력
			
			// ****************수행 시간 확인**************
			// 이시점 write() 수행 전 시간
			// System.nanoTime() : 1970.01.01 09:00:00 부터
			// 현재 시간까지의 차이를 ns(nano second)로 반환
			// 1ms (밀리)  		== 1/1000s
			// 1us (마이크로) 	== 1/1000ms
			// 1ns (나노)		== 1/1000us
			
			long startTime = System.nanoTime();
			
			fos.write(content.getBytes());
			
			long endTime = System.nanoTime();
			
			System.out.println("[수행 시간] : " + (endTime -startTime) + "ns");

			// 이시점 write() 수행 전 시간
			
			fos.flush(); // 스트림 안에 남아있는 모든 데이터를 모두 밀어냄
			System.out.println("출력 완료!");
			
		} catch( IOException/*FileNotFoundException의 부모*/ e) {
			e.printStackTrace();
		} finally { // try 예외 발생 여부 관계 없이 무조건 수행
			// 사용완료한 스트림을 제거(닫기, 메모리 반환)하는 코드 작성
			// -> 메모리 누수 방지
			
			try {
				// 스트림이 정상 생성된 경우
				// 스트림을 닫는다.
				// close() 메서드도 IOException 발생하기 때문에
				// try-catch 이용하여 예외 처리 필수
				if( fos != null )	fos.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
	
	/**
	 * 버퍼를 이용한 파일 출력
	 * + BufferedOutputStream 보토 스트림 이용
	 */
	public void bufferedFileByteOutput() {
		
		/* 버퍼(Buffer) 란?
		 * - 데이터를 모아두는 박스, 바구니 같은 메모리 공간
		 * 
		 * * 버퍼링
		 * - 인터넷 속도 낮음 + 스트리밍 코드가 효율이 안 좋음
		 * -> 동영상 재생 중에 미리 앞에 재생될 부분을 다운 받아놔서
		 * 영상을 끊김없이 볼 수 있게함
		 * -> 다운 받아서 저장해놓는 공간 == 버퍼
		 * 
		 * BufferedOutputStream / BufferedInputStream
		 *   출력용 보조 스트림 / 입력용 보조 스트림 : (바이트 기반)
		 *   
		 * - FileOutputStream은 1바이트씩 데이터를 입출력
		 * -> 통로가 좁아서 데이터 입출력이 느림
		 * 
		 * -> 보조스트림 이용 시 버퍼에 입출력할 내용을 모아서 한 번에 입출력
		 * --> 기반 스트림을 이용하는 횟수가 적어짐
		 * -> 성능, 시간 효율 증가
		 * */
		
		FileOutputStream fos = null; // 기반 스트림 참조변수
		
		BufferedOutputStream bos = null; // 보조 스트림 참조변수 선언
		
		try {
			
			fos = new FileOutputStream("/io_test/20240926/바이트기반_테스트_Buffered.txt");
			
			
			bos = new BufferedOutputStream(fos);
			
			StringBuilder sb = new StringBuilder();
			
			sb.append("Hello World!!\n");
			sb.append("1234567890\n");
			sb.append("~!@#$%^&^&**<>_+()\n");
			sb.append("가나다라마바사아\n");
			sb.append("이제 그만 쓰고싶어요\n");
			sb.append("무야호 \\\\\\~~~~~~~~~~~\n");
			
			String content = sb.toString();
			
			long startTime = System.nanoTime();
			
			bos.write(content.getBytes());
			
			long endTime = System.nanoTime();
			
			System.out.println("[수행 시간] : " + (endTime -startTime) + "ns");
			// 보조스트림 수행 시 시간이 좀 더 빠르다
			
			bos.flush();
			System.out.println("출력 완료!");
			
		} catch( Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(bos != null) bos.close();
				
				// 보조스트림(bos) close()시
				// 보조스트림 생성에 사용된 기반 스트림(fos)도 같이 close() 됨
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
	}
	
	/**
	 * 바이트 기반 파일 입력
	 */
	public void fileByteInput() {
		
		// 파일 입력용 바이트 기반 스트림 선언
		FileInputStream fis = null;
		
		try {
			
			fis = new FileInputStream("\\io_test\\20240926\\상사화_가사.txt");
			// InputSterm 만들 떄는 해당 경로에 실제 파일이 있어야함
			
			// 방법 1. 파일 내부 내용을 1byte씩 끊어서 가져오기
			// -> 2btye 범주의 글자들이 깨지는 문제가 발생
			
			// btye -> 자바에서 정수형
			// 다루기 힘들기 때문에 정수형 기본형이 int로 변환해서 사용
			
			int value = 0; // 읽어온 바이트값을 저장할 변수
			
			StringBuilder sb = new StringBuilder();
			
			while(true) {
				value = fis.read(); // 1byte씩 읽어오기
				// 단, 더 이상 읽어올 값이 없으면 -1 반환
				
				if(value == -1 ) break; // 다 읽어왔으면 반복 멈춤
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 사용 완료된 stream 메모리 반환
			
			try {
				if(fis != null) fis.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
	}
}


































